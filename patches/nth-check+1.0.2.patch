diff --git a/node_modules/svgo/node_modules/nth-check/lib/esm/compile.js b/node_modules/svgo/node_modules/nth-check/lib/esm/compile.js
index e38f77c..1c66c21 100644
--- a/node_modules/svgo/node_modules/nth-check/lib/esm/compile.js
+++ b/node_modules/svgo/node_modules/nth-check/lib/esm/compile.js
@@ -1,6 +1,6 @@
-export default compile;
 /**
  * Compiles a selector to an executable function.
+ * With improved regex performance.
  *
  * @param selector Selector to compile.
  * @param options Compilation options.
@@ -9,6 +9,7 @@ export default compile;
  * @see {@link https://github.com/fb55/nth-check|GitHub}
  */
 function compile(selector, options = {}) {
+    const MAX_ITERATION = 1000; // Prevent regex catastrophic backtracking
     const { a, b } = parse_1.default(selector);
     if (a === 0 && b === 0)
         return boolbase_1.default.falseFunc;
@@ -22,8 +23,14 @@ function compile(selector, options = {}) {
         // `a` is negative, so the traversal is reversed
         // Remove `a` and get the traversal index
         const index = idx - (idx % a) - b;
-        return index < 0 ? boolbase_1.default.falseFunc : (el) => {
+        // Prevent catastrophic backtracking
+        if (index < 0 || index > MAX_ITERATION) {
+            return boolbase_1.default.falseFunc;
+        }
+        return (el) => {
             const pos = adapter.getIndex(el);
+            // Prevent catastrophic backtracking
+            if (pos > MAX_ITERATION) return false;
             return (
             // Make sure to cap `pos` at `0` since we can traverse backwards
             pos - (pos % a) - b < 0 &&
@@ -36,8 +43,12 @@ function compile(selector, options = {}) {
     // When we have a cycle, the formula `idx - (idx % a) + b` can give us values
     // that match the `check` function, but still don't match the selector.
     // This is the case when `b >= a` && `idx % a === 0`.
-    return (el) => {
+    return (el) => {
         const pos = adapter.getIndex(el);
+        // Prevent catastrophic backtracking
+        if (pos > MAX_ITERATION) {
+            return false;
+        }
         if (a === 0)
             return b === pos;
         if (pos < b)
@@ -54,3 +65,5 @@ function compile(selector, options = {}) {
     };
 }
 exports.default = compile;
+
+export default compile; 